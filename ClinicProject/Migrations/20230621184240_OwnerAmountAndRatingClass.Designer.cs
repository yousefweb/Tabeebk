// <auto-generated />
using System;
using ClinicProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClinicProject.Migrations
{
    [DbContext(typeof(ClinicProjectDbContext))]
    [Migration("20230621184240_OwnerAmountAndRatingClass")]
    partial class OwnerAmountAndRatingClass
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClinicProject.Models.Clinic", b =>
                {
                    b.Property<Guid>("ClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Clinc_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClinicRate")
                        .HasColumnType("int");

                    b.Property<Guid>("Clinic_DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Clinic_Location")
                        .HasColumnType("int");

                    b.Property<string>("Clinic_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Days")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorRequest_ReceivePatientNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("clinc_Price")
                        .HasColumnType("float");

                    b.Property<int>("situationOfReservation")
                        .HasColumnType("int");

                    b.HasKey("ClinicId");

                    b.HasIndex("Clinic_DoctorId")
                        .IsUnique();

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("ClinicProject.Models.ClinicDay", b =>
                {
                    b.Property<Guid>("ClinicDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfWork")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ClinicDayId");

                    b.HasIndex("ClinicId");

                    b.ToTable("ClinicDays");
                });

            modelBuilder.Entity("ClinicProject.Models.ClinicRate", b =>
                {
                    b.Property<Guid>("ClinicRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RateOfPAtient")
                        .HasColumnType("int");

                    b.HasKey("ClinicRateId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PatientId");

                    b.ToTable("clinicRates");
                });

            modelBuilder.Entity("ClinicProject.Models.Doctor", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DoctorAmount")
                        .HasColumnType("float");

                    b.Property<int>("Doctor_Age")
                        .HasColumnType("int");

                    b.Property<int>("Doctor_AppointmentType")
                        .HasColumnType("int");

                    b.Property<string>("Doctor_Certification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Doctor_Gender")
                        .HasColumnType("int");

                    b.Property<string>("Doctor_ImageProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Doctor_PhoneNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("Doctor_RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Doctor_Specialization")
                        .HasColumnType("int");

                    b.Property<string>("Doctor_UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Doctor_YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ClinicProject.Models.DoctorNoteToAdmin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("MessageTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("doctorNoteToAdmins");
                });

            modelBuilder.Entity("ClinicProject.Models.DoctorRequest", b =>
                {
                    b.Property<Guid>("DoctorRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DoctorRequest_Age")
                        .HasColumnType("int");

                    b.Property<int>("DoctorRequest_AppointmentType")
                        .HasColumnType("int");

                    b.Property<string>("DoctorRequest_Certification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorRequest_ClinicClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DoctorRequest_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorRequest_FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorRequest_Gender")
                        .HasColumnType("int");

                    b.Property<string>("DoctorRequest_ImageProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorRequest_LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorRequest_Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorRequest_PhoneNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("DoctorRequest_RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorRequest_Specialization")
                        .HasColumnType("int");

                    b.Property<string>("DoctorRequest_UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorRequest_YearsOfExperience")
                        .HasColumnType("int");

                    b.Property<int>("StatusOfDoctor")
                        .HasColumnType("int");

                    b.HasKey("DoctorRequestId");

                    b.HasIndex("DoctorRequest_ClinicClinicId");

                    b.ToTable("DoctorRequests");
                });

            modelBuilder.Entity("ClinicProject.Models.OldReservation", b =>
                {
                    b.Property<Guid>("OldReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("End_Oldreservation")
                        .HasColumnType("datetime2");

                    b.Property<int>("OldReservation_AppointmentType")
                        .HasColumnType("int");

                    b.Property<int>("OldReservation_Day")
                        .HasColumnType("int");

                    b.Property<Guid>("OldReservation_DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OldReservation_PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OldReservation_Specialization")
                        .HasColumnType("int");

                    b.Property<DateTime>("Strat_Oldreservation")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TimeSlotId_Oldreservation")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("situationOfOldReservation")
                        .HasColumnType("int");

                    b.HasKey("OldReservationId");

                    b.HasIndex("OldReservation_DoctorId");

                    b.HasIndex("OldReservation_PatientId");

                    b.ToTable("oldReservations");
                });

            modelBuilder.Entity("ClinicProject.Models.Owner", b =>
                {
                    b.Property<Guid>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Onwer_Technical")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Owner_Amount")
                        .HasColumnType("float");

                    b.Property<string>("Owner_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Owner_PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("OwnerId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("ClinicProject.Models.Patient", b =>
                {
                    b.Property<Guid>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Patient_Aboutme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Patient_Age")
                        .HasColumnType("int");

                    b.Property<string>("Patient_Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Patient_Gender")
                        .HasColumnType("int");

                    b.Property<string>("Patient_LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Patient_Location")
                        .HasColumnType("int");

                    b.Property<int>("Patient_PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("Patient_SendNoteToDoctor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ClinicProject.Models.PatientNoteToAdmin", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MessageTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("PatientId");

                    b.ToTable("patientNoteToAdmins");
                });

            modelBuilder.Entity("ClinicProject.Models.PatientNoteToDoctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("MessageTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("patientNoteToDoctors");
                });

            modelBuilder.Entity("ClinicProject.Models.Reservation", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("End_reservation")
                        .HasColumnType("datetime2");

                    b.Property<double>("ReservationAmount")
                        .HasColumnType("float");

                    b.Property<int>("Reservation_AppointmentType")
                        .HasColumnType("int");

                    b.Property<int>("Reservation_Day")
                        .HasColumnType("int");

                    b.Property<Guid>("Reservation_DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Reservation_PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Reservation_Specialization")
                        .HasColumnType("int");

                    b.Property<DateTime>("Strat_reservation")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TimeSlotId_reservation")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("situationOfReservation")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("Reservation_DoctorId");

                    b.HasIndex("Reservation_PatientId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ClinicProject.Models.TimeSlot", b =>
                {
                    b.Property<Guid>("TimeSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicDayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TimeSlotId");

                    b.HasIndex("ClinicDayId");

                    b.ToTable("timeSlots");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ClinicProject.Models.Clinic", b =>
                {
                    b.HasOne("ClinicProject.Models.Doctor", "Clinic_Doctor")
                        .WithOne("Doctor_Clinic")
                        .HasForeignKey("ClinicProject.Models.Clinic", "Clinic_DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic_Doctor");
                });

            modelBuilder.Entity("ClinicProject.Models.ClinicDay", b =>
                {
                    b.HasOne("ClinicProject.Models.Clinic", "Clinic")
                        .WithMany("Clinic_Days")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("ClinicProject.Models.ClinicRate", b =>
                {
                    b.HasOne("ClinicProject.Models.Clinic", "Clinic")
                        .WithMany("ClinicRates")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicProject.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicProject.Models.DoctorNoteToAdmin", b =>
                {
                    b.HasOne("ClinicProject.Models.Doctor", "doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");
                });

            modelBuilder.Entity("ClinicProject.Models.DoctorRequest", b =>
                {
                    b.HasOne("ClinicProject.Models.Clinic", "DoctorRequest_Clinic")
                        .WithMany()
                        .HasForeignKey("DoctorRequest_ClinicClinicId");

                    b.Navigation("DoctorRequest_Clinic");
                });

            modelBuilder.Entity("ClinicProject.Models.OldReservation", b =>
                {
                    b.HasOne("ClinicProject.Models.Doctor", "OldReservation_Doctor")
                        .WithMany()
                        .HasForeignKey("OldReservation_DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicProject.Models.Patient", "OldReservation_Patient")
                        .WithMany()
                        .HasForeignKey("OldReservation_PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OldReservation_Doctor");

                    b.Navigation("OldReservation_Patient");
                });

            modelBuilder.Entity("ClinicProject.Models.PatientNoteToAdmin", b =>
                {
                    b.HasOne("ClinicProject.Models.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("ClinicProject.Models.PatientNoteToDoctor", b =>
                {
                    b.HasOne("ClinicProject.Models.Doctor", "doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicProject.Models.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("ClinicProject.Models.Reservation", b =>
                {
                    b.HasOne("ClinicProject.Models.Clinic", null)
                        .WithMany("Clinic_Reservations")
                        .HasForeignKey("ClinicId");

                    b.HasOne("ClinicProject.Models.Doctor", "Reservation_Doctor")
                        .WithMany()
                        .HasForeignKey("Reservation_DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicProject.Models.Patient", "Reservation_Patient")
                        .WithMany("Patient_Reservations")
                        .HasForeignKey("Reservation_PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation_Doctor");

                    b.Navigation("Reservation_Patient");
                });

            modelBuilder.Entity("ClinicProject.Models.TimeSlot", b =>
                {
                    b.HasOne("ClinicProject.Models.ClinicDay", "ClinicDay")
                        .WithMany("TimeSlots")
                        .HasForeignKey("ClinicDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicDay");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicProject.Models.Clinic", b =>
                {
                    b.Navigation("Clinic_Days");

                    b.Navigation("Clinic_Reservations");

                    b.Navigation("ClinicRates");
                });

            modelBuilder.Entity("ClinicProject.Models.ClinicDay", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("ClinicProject.Models.Doctor", b =>
                {
                    b.Navigation("Doctor_Clinic");
                });

            modelBuilder.Entity("ClinicProject.Models.Patient", b =>
                {
                    b.Navigation("Patient_Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
